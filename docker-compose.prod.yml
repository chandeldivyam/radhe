version: "3.8"

services:
  ###########################################################################
  # 1. TRAEFIK REVERSE PROXY
  ###########################################################################
  traefik:
    image: "traefik:v3.3"
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Let's Encrypt/ACME config:
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      # - --certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app_network

  ###########################################################################
  # 2. POSTGRES
  ###########################################################################
  db:
    image: pgvector/pgvector:pg16
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  ###########################################################################
  # 5. BACKEND API
  ###########################################################################
  backend:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  ###########################################################################
  # 6. REDIS
  ###########################################################################
  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - app_network

  ###########################################################################
  # 7. MINIO
  ###########################################################################
  minio:
    image: minio/minio
    restart: unless-stopped
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      # API
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_URL}`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=myresolver"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-api.service=minio-api"
      # Console
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_URL}`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=myresolver"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-console.service=minio-console"

  ###########################################################################
  # 8. CELERY WORKER
  ###########################################################################
  celery_worker:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    command: celery -A celery_worker worker --loglevel=info
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - redis
      - backend
    networks:
      - app_network

  ###########################################################################
  # 9. FLOWER (Optional, you might want to disable in prod)
  ###########################################################################
  flower:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    command: celery -A celery_worker flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    networks:
      - app_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`${FLOWER_URL}`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

  ###########################################################################
  # 10. FRONTEND
  ###########################################################################
  frontend:
    build:
      context: .
      dockerfile: docker/prod/frontend.dockerfile
    restart: unless-stopped
    networks:
      - app_network
    env_file:
    - ./frontend/.env.production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  ###########################################################################
  # 11. COLLABORATION SERVICE
  ###########################################################################
  collaboration:
    build:
      context: ./collaboration_service
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file:
      - ./collaboration_service/.env
    networks:
      - app_network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.collaboration.rule=Host(`colab.${DOMAIN_NAME}`)"
      - "traefik.http.routers.collaboration.entrypoints=websecure"
      - "traefik.http.routers.collaboration.tls.certresolver=myresolver"
      - "traefik.http.services.collaboration.loadbalancer.server.port=1234"

networks:
  app_network:
    driver: bridge

volumes:
  traefik:
  postgres_data:
  minio_data: